:root {
  .theme-light {
    --TextField-Background-Color: var(--Gray-Color-0);
    --TextField-Font-Color: var(--Gray-Color-8);
    --TextField-Placeholder-Color: var(--Gray-Color-5);
    --TextField-Shadow-Color: var(--Primary-Color-1);

    --TextField-ReadOnly-Background-Color: var(--Gray-Color-1);
    --TextField-ReadOnly-Color: var(--Gray-Color-8);

    --TextField-Disabled-Background-Color: var(--Gray-Color-2);
    --TextField-Disabled-Font-Color: var(--Gray-Color-6);
    --TextField-Disabled-Placeholder-Color: var(--Gray-Color-5);
  }
  .theme-dark {
    --TextField-Background-Color: var(--Gray-Color-1);
    --TextField-Font-Color: var(--Gray-Color-10);
    --TextField-Placeholder-Color: var(--Gray-Color-5);
    --TextField-Shadow-Color: var(--Primary-Color-3);

    --TextField-ReadOnly-Background-Color: var(--Gray-Color-1);
    --TextField-ReadOnly-Color: var(--Gray-Color-5);

    --TextField-Disabled-Background-Color: var(--Gray-Color-2);
    --TextField-Disabled-Font-Color: var(--Gray-Color-6);
    --TextField-Disabled-Placeholder-Color: var(--Gray-Color-5);
  }
}

$textfield-height: (
  sm: toRem(32),
  md: toRem(40),
  lg: toRem(48),
);

$textfield-border-radius: (
  sm: $border-radius-sm,
  md: $border-radius-md,
  lg: $border-radius-lg,
);

$textfield-padding: (
  sm: toRem(8),
  md: toRem(16),
  lg: toRem(16),
);

$textfield-font: (
  sm: var(--Detail-Font-1),
  md: var(--Body-Font-1),
  lg: var(--Body-Font-1),
);

@mixin textFieldOfSize($size) {
  height: #{map-get($textfield-height, $size)};
  border-radius: #{map-get($textfield-border-radius, $size)};
  padding: 0 #{map-get($textfield-padding, $size)};
  input {
    padding: 0;
    width: calc(100% - 2 * #{map-get($textfield-padding, $size)});
    border-radius: #{map-get($textfield-border-radius, $size)};
    font: #{map-get($textfield-font, $size)};
  }
}

.ui-textfield {
  display: flex;
  flex-direction: column;
  gap: toRem(4);

  // Label Î∞è TextMessage
  &-label,
  &-msg {
    margin: 0 0 0 toRem(4);
    font: var(--Micro-Font-1);
  }

  &-msg {
    display: flex;
    align-items: center;
    gap: toRem(4);
    path {
      fill: var(--Gray-Color-8);
    }
    &.error {
      color: var(--Danger-Color-5);
      path {
        fill: var(--Danger-Color-5);
      }
    }
  }

  // Input
  &-input {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border: toRem(1) solid var(--Gray-Color-4);

    &.is-error {
      border-color: var(--Danger-Color-5);
    }

    &.read-only input {
      color: var(--TextField-ReadOnly-Color);
      background-color: var(--TextField-ReadOnly-Background-Color);
    }

    &.is-disabled input {
      background-color: var(--TextField-Disabled-Background-Color);
      color: var(--TextField-Disabled-Font-Color);
      &::placeholder {
        color: var(--TextField-Disabled-Placeholder-Color);
      }
    }

    &:has(input:focus) {
      border: toRem(1) solid var(--Primary-Color-5);
      box-shadow: 0 0 toRem(5) var(--TextField-Shadow-Color);
    }

    input {
      margin: 0;
      border: 0;
      height: 100%;
      color: var(--TextField-Font-Color);
      background-color: var(--TextField-Background-Color);
      &::placeholder {
        color: var(--TextField-Placeholder-Color);
      }
      &:focus {
        outline: 0;
      }
      &:-webkit-autofill {
        -webkit-box-shadow: 0 0 0 1000px white inset;
        box-shadow: 0 0 0 1000px white inset;
      }
    }

    &.small {
      @include textFieldOfSize('sm');
    }
    &.medium {
      @include textFieldOfSize('md');
    }
    &.large {
      @include textFieldOfSize('lg');
    }
  }
}
